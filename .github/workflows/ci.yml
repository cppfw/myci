name: ci
on:
  push: {branches-ignore: [latest], tags: ['*']}
  pull_request:
env:
  PACKAGE_NAME: ${{ github.event.repository.name }}
  MYCI_GIT_USERNAME: igagis
  MYCI_GIT_PASSWORD: ${{ secrets.MYCI_GIT_ACCESS_TOKEN }}
jobs:
##### linux #####
  linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          # - {os: debian, codename: stretch, image_owner: , package_type: deb}
          - {os: debian, codename: buster, image_owner: , package_type: deb}
          - {os: debian, codename: buster, image_owner: i386/, package_type: deb, labels: [i386,docker]}
          - {os: debian, codename: buster, image_owner: arm32v7/, package_type: deb, labels: [arm,docker]}
          - {os: debian, codename: bullseye, image_owner: , package_type: deb}
          - {os: debian, codename: bullseye, image_owner: i386/, package_type: deb, labels: [i386,docker]}
          - {os: debian, codename: bullseye, image_owner: arm32v7/, package_type: deb, labels: [arm,docker]}
          - {os: debian, codename: bullseye, image_owner: arm64v8/, package_type: deb, labels: [arm64,docker]}
          - {os: ubuntu, codename: bionic, image_owner: , package_type: deb}
          - {os: ubuntu, codename: focal, image_owner: , package_type: deb}
          - {os: ubuntu, codename: jammy, image_owner: , package_type: deb}
          - {os: ubuntu, codename: jammy, image_owner: i386/, package_type: deb, labels: [i386,docker]}
          # - {os: raspbian, codename: stretch, image_owner: igagis/, package_type: deb, labels: [arm,docker]}
          - {os: raspbian, codename: buster, image_owner: igagis/, package_type: deb, labels: [arm,docker]}
          - {os: raspbian, codename: bullseye, image_owner: igagis/, package_type: deb, labels: [arm,docker]}
    runs-on: ${{ (matrix.labels == '' && 'ubuntu-latest') || matrix.labels }}
    container: ${{ matrix.image_owner }}${{ matrix.os }}:${{ matrix.codename }}
    name: linux - ${{ matrix.image_owner }}${{ matrix.os }}:${{ matrix.codename }}
    steps:
      - name: install ci tools
        run: |
          # configure timezone to avoid 'tzdata' package to require user interaction during installation (needed for ubuntu:focal)
          TZ=Europe/Helsinki ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

          apt --quiet update --assume-yes
          apt --quiet install --assume-yes devscripts equivs git
      - name: git clone
        uses: myci-actions/checkout@master
      - name: install myci
        run: make install
      - name: set PACKAGE_VERSION
        uses: myci-actions/export-env-var@master
        with: {name: PACKAGE_VERSION, value: $(myci-deb-version.sh debian/changelog)}
      - name: prepare debian package
        run: myci-deb-prepare.sh
      - name: install deps
        run: myci-deb-install-build-deps.sh
      - name: build
        run: dpkg-buildpackage --unsigned-source --unsigned-changes
      - name: deploy deb packages
        # NOTE: the myci-dummy_x.x.x_armhf.deb package will be deployed to generate armhf packages index in the debian repo, in case there was no such index there
        run: |
          echo "${{ secrets.MYCI_REPO_SSH_KEY }}" > repo_key_rsa && chmod 600 repo_key_rsa
          myci-deploy-debian-ssh-freight.sh --key repo_key_rsa --server gagis.hopto.org --repo cppfw/${{ matrix.os }} --distro ${{ matrix.codename }} --component main ../${PACKAGE_NAME}*_${PACKAGE_VERSION}_*.deb
        if: matrix.package_type == 'deb' && startsWith(github.ref, 'refs/tags/')
##### macosx #####
  macosx:
    runs-on: macos-latest
    steps:
    - name: git clone
      uses: myci-actions/checkout@master
    - name: install myci
      run: make install
    - name: install deps
      run: myci-brew-install.sh `myci-list-deps-homebrew.sh`
    - name: build
      run: make
    - name: test
      run: make test
    - name: deploy
      run: myci-deploy-homebrew.sh --tap cppfw/tap
      if: startsWith(github.ref, 'refs/tags/')
##### msys2 #####
  msys2:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: make msys2 to provide the default shell
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: MSYS
        install: >-
          msys2-devel
          make
    - name: git clone
      uses: myci-actions/checkout@master
    - name: install myci
      run: make install
    - name: prepare pacman package
      run: myci-apply-version.sh --version $(myci-deb-version.sh debian/changelog) msys2/PKGBUILD.in
    - name: build
      run: |
        cd msys2
        makepkg --syncdeps --noconfirm --skipinteg
    - name: deploy
      run: |
        echo "${{ secrets.MYCI_REPO_SSH_KEY }}" > repo_key_rsa && chmod 600 repo_key_rsa
        myci-deploy-pacman-ssh.sh --server gagis.hopto.org --key repo_key_rsa --repo cppfw/msys2/msys --database cppfw_msys msys2/$PACKAGE_NAME-*-any.pkg.*
      if: startsWith(github.ref, 'refs/tags/')
##### mingw #####
  msys2-mingw:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {arch: i686, repo: mingw32}
          - {arch: x86_64, repo: mingw64}
    name: msys2 - ${{ matrix.repo }}
    steps:
    - name: make msys2 to provide the default shell
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: ${{ matrix.repo }}
        install: >-
          msys2-devel
          make
          diffutils
    - name: add cppfw pacman msys repo
      uses: myci-actions/add-pacman-repo@master
      with:
        name: cppfw_msys
        url: http://gagis.hopto.org/repo/cppfw/msys2/msys
        shell: 'msys2 {0}'
        key-server: http://gagis.hopto.org/repo/cppfw/pubkey.gpg
    - name: git clone
      uses: myci-actions/checkout@master
    - name: install myci
      run: make install
    - name: prepare pacman package
      run: myci-apply-version.sh --version $(myci-deb-version.sh debian/changelog) msys2/PKGBUILD.in
    - name: build
      # to make makepkg-mingw build only one architecture we need to set the MINGW_ARCH
      env: {MINGW_ARCH: '${{ matrix.repo }}'}
      run: |
        cd msys2
        PKGEXT='.pkg.tar.xz' makepkg-mingw --syncdeps --noconfirm --skipinteg
